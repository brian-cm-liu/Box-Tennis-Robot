#include <NewPing.h>

//Pins
const int sonarTrig = 11;
const int sonarEcho = 12;
const int MOTOR1_FORWARD = 9;
const int MOTOR1_BACKWARD = 8;
const int MOTOR1_ENABLE = 10;
const int MOTOR2_FORWARD = 6;
const int MOTOR2_BACKWARD = 7;
const int MOTOR2_ENABLE = 5;
const int IR_PIN_R = A0;
const int IR_PIN_L = A1;

//IR array
const int IR_PIN_1 = A2;
const int IR_PIN_3 = A3;
const int IR_PIN_5 = A4;

const int SERVO_1 = 3;
//const int left_servo =;
//const int right_servo =; 
//const int up_servo = ;

static int stage = 1;


//Creating sonar object and storing distance data
NewPing sonarSensor(sonarTrig, sonarEcho, 200);
int distanceToObject = 0;

//Movement Motor 1 is right side, Motor 2 is left side
//MotorL speed = MotorR speed * 1.4
const int forwardSpeedL = 175;
const int forwardSpeedR = 125;
float forwardIncrement = 0;

//Variables for controlling how fast and precisely the robot turns
const int turnSpeedL = 175;
const int turnSpeedR = 125;
int leftIncrement = 0;
int rightIncrement = 0;

//Variables for searching
const float searchDistance = 50;
const float pickupDistance = 10;
const float candleThreshold = 850;

/**

/**
 * 1000 is about 180
 */


void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  pinMode(IR_PIN_R,INPUT);
  pinMode(IR_PIN_L,INPUT);

  pinMode(IR_PIN_1,INPUT);
  pinMode(IR_PIN_3,INPUT);
  pinMode(IR_PIN_5,INPUT);
  delay(1000);

}

void loop() {
  distanceToObject = sonarSensor.ping_cm();
  //Serial.println(distanceToObject);
  int irRight = analogRead(IR_PIN_R);
  int irLeft = analogRead(IR_PIN_L);

  int lightLeft = analogRead(IR_PIN_5);
  int lightMiddle = analogRead(IR_PIN_3);
  int lightRight = analogRead(IR_PIN_1);
  /*
  Serial.print("Right: ");
  Serial.print(irRight);
  Serial.print(" Left: ");
  Serial.println(irLeft);
  */


  Serial.print("left: ");
  Serial.print(lightLeft);
  Serial.print("| middle: ");
  Serial.print(lightMiddle);
  Serial.print("| right: ");
  Serial.println(lightRight);
  

  

  //Turning left
  if(stage == 1)
  {
    turn(-1);
    
    if(distanceToObject<searchDistance && distanceToObject > 10)
    {
      Serial.print("Object found: ");
      Serial.println(distanceToObject);
      stage = 3;
    }
    if(irLeft>880)
    {
      Serial.println("Line detected");
      stage = 2;
      halt();
    }
  }

  //Scanning while turning right
  if(stage == 2)
  {
    turn(1);
    //Move to 3 if object found
    if(distanceToObject<searchDistance && distanceToObject > 10)
    {
      Serial.println("Object found");
      stage = 3;
    }
    //Return to 1 if line detected
    if(irRight>500)
    {
      Serial.println("Line detected");
      stage = 1;
      halt();
    }
  }

  //Moving forward to the block
  if(stage == 3)
  {
    forward();
    if(distanceToObject<pickupDistance)
    {
      stage = 4;
    }
  }

  if(stage == 4)
  {
    turn(1);
    if(lightMiddle>lightLeft && lightMiddle> lightRight && lightMiddle>500)
    {
      Serial.println("Candle in front");
      stage = 5;
    }
  }
  if(stage == 5)
  {
    forward();
    if(lightMiddle>candleThreshold){
      stage = 6;
    }
  }

  //Stopping
  if(stage == 6)
  {
    backward();
    delay(1000);
    stage = 1;
  }
  
}
//Move forward an arbitrary distance
void forward(){
  digitalWrite(MOTOR1_FORWARD,HIGH);
  digitalWrite(MOTOR1_BACKWARD,LOW);
  digitalWrite(MOTOR2_FORWARD,HIGH);
  digitalWrite(MOTOR2_BACKWARD,LOW);
  analogWrite(MOTOR1_ENABLE,forwardSpeedR);
  analogWrite(MOTOR2_ENABLE,forwardSpeedL);
}
//Move backward an arbitrary distance
void backward()
{
  digitalWrite(MOTOR1_FORWARD,LOW);
  digitalWrite(MOTOR1_BACKWARD,HIGH);
  digitalWrite(MOTOR2_FORWARD,LOW);
  digitalWrite(MOTOR2_BACKWARD,HIGH);
  analogWrite(MOTOR1_ENABLE,forwardSpeedR);
  analogWrite(MOTOR2_ENABLE,forwardSpeedL);
}

//This function turns the robot in the specified direction, 1 is right, -1 is left
void turn(float turnAngle){
  if(turnAngle == 1){
    digitalWrite(MOTOR1_FORWARD,LOW);
    digitalWrite(MOTOR1_BACKWARD,HIGH);
    digitalWrite(MOTOR2_FORWARD,HIGH);
    digitalWrite(MOTOR2_BACKWARD,LOW);
    analogWrite(MOTOR1_ENABLE,turnSpeedR);
    analogWrite(MOTOR2_ENABLE,turnSpeedL);
    return;
  }
  if(turnAngle == -1){
    digitalWrite(MOTOR1_FORWARD,HIGH);
    digitalWrite(MOTOR1_BACKWARD,LOW);
    digitalWrite(MOTOR2_FORWARD,LOW);
    digitalWrite(MOTOR2_BACKWARD,HIGH);
    analogWrite(MOTOR1_ENABLE,turnSpeedR);
    analogWrite(MOTOR2_ENABLE,turnSpeedL);
    return;
  }
}
void halt(){
  digitalWrite(MOTOR1_FORWARD,LOW);
  digitalWrite(MOTOR1_BACKWARD,LOW);
  digitalWrite(MOTOR2_FORWARD,LOW);
  digitalWrite(MOTOR2_BACKWARD,LOW);
  analogWrite(MOTOR1_ENABLE,0);
  analogWrite(MOTOR2_ENABLE,0);
  delay(500);
}
